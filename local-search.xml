<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>spring中事务的原理</title>
    <link href="/2023/03/11/spring/spring%E4%B8%AD%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <url>/2023/03/11/spring/spring%E4%B8%AD%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>spring在使用事务的时候会出现事务失效的情况。这里了解spring中事务原理，以及事务失效的原理和解决方案。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>spring中事务是基于AOP的，如果不是代理对象执行的话就不会有事务。</p><p>比如，加上 @Transactional 的事务方法，是被包裹起来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>UserService target;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 切面逻辑 spring transaction</span><br><span class="hljs-comment">// 有 @Transactional 则开启事务</span><br><br>target.test();<br><br><span class="hljs-comment">// 1. 事务管理器新建一个数据库连接 conn</span><br><span class="hljs-comment">// 2. 数据库连接的 autocommit 设置位 false conn.autocommit = false;</span><br><span class="hljs-comment">// jdbcTemplate 会获取到前面建立的数据库连接</span><br><span class="hljs-comment">// 执行SQL</span><br><span class="hljs-comment">// 调用连接到 commit 方法提交事务 conn.commit();</span><br><span class="hljs-comment">// 如果失败，就调用连接的 rollback 进行回滚</span><br><br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Transactional</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTransactionManager</span><span class="hljs-params">()</span> &#123;  <br>   jdbcTemplate.execute(<span class="hljs-string">&quot;INSERT INTO `demo_db`.`x_sys_tb_user`(`user_id`, `user_name`) VALUES (&#x27;1&#x27;, &#x27;1&#x27;);&quot;</span>);  <br>   subA();  <br>&#125;  <br>  <br><span class="hljs-comment">// propagation 传播  </span><br><span class="hljs-comment">// 设置传播类型  </span><br><span class="hljs-meta">@Transactional(propagation = Propagation.NEVER)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subA</span><span class="hljs-params">()</span> &#123;  <br>   jdbcTemplate.execute(<span class="hljs-string">&quot;INSERT INTO `demo_db`.`x_sys_tb_user`(`user_id`, `user_name`) VALUES (&#x27;2&#x27;, &#x27;2&#x27;);&quot;</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>在执行 testTransactionManager() 的时候 ，subA();是 target即普通对象执行的。</p><h3 id="事务生效解决办法"><a href="#事务生效解决办法" class="headerlink" title="事务生效解决办法"></a>事务生效解决办法</h3><ol><li>拆分，把失效的事务拆分出去。新建一个对象把失效的事务方法放到这个对象中，然后注入这对象，</li><li>自己注入自己（注：在 spring 中也算是循环依赖，但是 spring 帮我们解决了）</li><li>AopContext.currentProxy() 获取当前的代理对象，然后用代理对象调用失效的事务（注：这种方法可能可读性差一点）</li></ol>]]></content>
    
    
    <categories>
      
      <category>spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring中bean的生命周期</title>
    <link href="/2023/03/06/spring/spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2023/03/06/spring/spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>bean在创建过程中会出现各种各样的循环依赖。了解spring如何用三级缓存机制解决循环依赖，解决spring没有解决的循环依赖。所以需要了解bean的生命周期原理。</p><h2 id="出现属性的循环依赖时，bean的生命周期"><a href="#出现属性的循环依赖时，bean的生命周期" class="headerlink" title="出现属性的循环依赖时，bean的生命周期"></a>出现属性的循环依赖时，bean的生命周期</h2><p>spring用三级缓存机制来解决属性的循环依赖。</p><p>以 UserService 和 OrderService 出现属性的循环依赖为例子。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;  <br>  <br>   <span class="hljs-meta">@Autowired</span><br>   UserService userService;<br>&#125;<br><br><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;  <br>  <br>   <span class="hljs-meta">@Autowired</span><br>   OrderService orderService;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="orderService-添加入set集合"><a href="#orderService-添加入set集合" class="headerlink" title="orderService 添加入set集合"></a>orderService 添加入set集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; singletonsCurrentlyInCreation =  <br>      Collections.newSetFromMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">16</span>));<br></code></pre></td></tr></table></figure><p>singletonsCurrentlyInCreation 存储正在创建的 beanName ，后面用来检查是否出现了循环依赖。</p><p>这里把 “orderService” 添加进这集合。</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681109004000w4gxqi.png" alt="gh"></p><h3 id="创建bean的普通对象"><a href="#创建bean的普通对象" class="headerlink" title="创建bean的普通对象"></a>创建bean的普通对象</h3><p>createBeanInstance 中推断构造函数，然后实例化bean并返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">instanceWrapper = createBeanInstance(beanName, mbd, args);<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681109525000v8m269.png" alt="gh"></p><h3 id="将-orderService-添加到三级缓存中"><a href="#将-orderService-添加到三级缓存中" class="headerlink" title="将 orderService 添加到三级缓存中"></a>将 orderService 添加到三级缓存中</h3><p>三级缓存 singletonFactories 存储的是一个lambda 表达式。这个表达式用来存储 生成 orderService 对象的过程。后面出现循环依赖的时候会用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681109706000jir3bm.png" alt="gh"></p><h3 id="orderService-属性填充"><a href="#orderService-属性填充" class="headerlink" title="orderService 属性填充"></a>orderService 属性填充</h3><p>populateBean 会给 orderService 做属性填充，把 UserService 填充进去。在这里，会进入 UserService 的生命周期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">populateBean(beanName, mbd, instanceWrapper);<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681109854000kbbgiz.png" alt="gh"></p><h3 id="三级缓存中生成-orderService"><a href="#三级缓存中生成-orderService" class="headerlink" title="三级缓存中生成 orderService"></a>三级缓存中生成 orderService</h3><p>UserService 的生命周期的步骤同上 orderService 的生命周期。<br>这里直接看到给 UserService 的bean生命周期中，对 字段 orderService 的属性注入过程。</p><p>这里需要把 orderService 从三级缓存中获取出来，然后放入二级缓存，如果需要AOP 这里会提前进行 AOP。</p><p>（注：这里二级缓存是为了，防止 UserService 出现多个循环依赖时，不生成多个代理对象。而存在，这里就不放开解释了。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br><span class="hljs-comment">// 从 三级缓存 singletonFactories 里面找  </span><br><span class="hljs-comment">// 获取到 lambda 表达式  </span><br>ObjectFactory&lt;?&gt; singletonFactory = <span class="hljs-built_in">this</span>.singletonFactories.get(beanName);  <br><span class="hljs-keyword">if</span> (singletonFactory != <span class="hljs-literal">null</span>) &#123;  <br>   <span class="hljs-comment">// 执行 lambda 表达式  </span><br>   singletonObject = singletonFactory.getObject();  <br>   <span class="hljs-comment">// 把结果放到 二级缓存 earlySingletonObjects 里面  </span><br>   <span class="hljs-built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);<br>...<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681112758000cnkzlf.png" alt="gh"></p><p>这里从三级缓存中获取到 orderService 并完成 UserService 的生命周期。</p><h3 id="orderService-的AOP阶段"><a href="#orderService-的AOP阶段" class="headerlink" title="orderService 的AOP阶段"></a>orderService 的AOP阶段</h3><p>这里如果循环依赖提前进行了AOP 就不会再进行AOP获取代理对象了。</p><p>earlyProxyReferences 缓存的就是 执行lambda 表达式获取的 bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Object, Object&gt; earlyProxyReferences = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681113361000c6xc8m.png" alt="gh"></p><h3 id="orderService-放入单例池"><a href="#orderService-放入单例池" class="headerlink" title="orderService 放入单例池"></a>orderService 放入单例池</h3><p>因为出现了循环依赖所以从二级缓存中获取bean，放入单例池</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681114190000rw66ry.png" alt="gh"></p><h3 id="把-orderService-从-set集合中删除"><a href="#把-orderService-从-set集合中删除" class="headerlink" title="把 orderService 从 set集合中删除"></a>把 orderService 从 set集合中删除</h3><p>orderService 的生命周期结束，已经不是正在创建的 bean。所以这里把 orderService 从 set集合中 remove。</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681114410000wq7eq8.png" alt="gh"></p><h2 id="构造方法的循环依赖解决"><a href="#构造方法的循环依赖解决" class="headerlink" title="构造方法的循环依赖解决"></a>构造方法的循环依赖解决</h2><p>构造方法的循环依赖，spring的三级缓存机制是解决不了的</p><p>因为卡在了创建普通对象，构造方法执行不了，普通对象都创建不成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoAService</span> &#123;  <br>  <br>   <span class="hljs-keyword">public</span>  <span class="hljs-title function_">DemoAService</span><span class="hljs-params">(DemoBService demoBService)</span> &#123;<br>   <br>   &#125;<br>  <br>&#125;<br><br><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoBService</span> &#123;  <br>  <br>   <span class="hljs-keyword">public</span>  <span class="hljs-title function_">DemoBService</span><span class="hljs-params">(DemoAService demoAService)</span> &#123;<br>   <br>   &#125; <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>但是 加上 @Lazy 注解可以解决</p><p>@Lazy 不真正创建对象，返回一个代理对象。用的时候才会创建对象。<br>普通对象创建不成功，不影响</p><p>这里加上一个 @Lazy 就能解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoAService</span> &#123;  <br><br><span class="hljs-meta">@Lazy</span><br><span class="hljs-keyword">public</span>  <span class="hljs-title function_">DemoAService</span><span class="hljs-params">(DemoBService demoBService)</span> &#123;<br>   <br>&#125;<br>  <br>&#125;<br><br><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoBService</span> &#123;  <br><br>   <span class="hljs-keyword">public</span>  <span class="hljs-title function_">DemoBService</span><span class="hljs-params">(DemoAService demoAService)</span> &#123;<br>   <br>&#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="async-注解的循环依赖"><a href="#async-注解的循环依赖" class="headerlink" title="async 注解的循环依赖"></a>async 注解的循环依赖</h2><p>同上。</p><p>给属性加上 @Lazy 之后，不存在循环依赖了。</p><p>加上 @Lazy 创建代理对象，执行的时候才会真正的创建对象。</p>]]></content>
    
    
    <categories>
      
      <category>spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring中的扫描机制</title>
    <link href="/2023/03/05/spring/spring%E4%B8%AD%E7%9A%84%E6%89%AB%E6%8F%8F%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/03/05/spring/spring%E4%B8%AD%E7%9A%84%E6%89%AB%E6%8F%8F%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目中出现，一个bean 在 @ComponentScan 注解的包下面却没有被扫描，并创建为bean的bug。所以需要了解spring的扫描机制。</p><h2 id="原因以及源码位置"><a href="#原因以及源码位置" class="headerlink" title="原因以及源码位置"></a>原因以及源码位置</h2><p>当项目里面有 <code>resources/META-INF/spring.components 文件</code>的时候，spring进入这个if判断 <code>if (this.componentsIndex != null &amp;&amp; indexSupportsIncludeFilters())</code>， ，扫描机制的ComponentScan失效了</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/16811155360007gdq84.png" alt="gh"></p><p>当进入这个判断之后，spring就会只扫描 resources&#x2F;META-INF&#x2F;spring.components 文件 中的bean。所以其他的bean并不会被扫描进来。</p><h2 id="spring中-ComponentScan-的-nameGenerator-属性"><a href="#spring中-ComponentScan-的-nameGenerator-属性" class="headerlink" title="spring中 ComponentScan 的 nameGenerator 属性"></a>spring中 ComponentScan 的 nameGenerator 属性</h2><p>nameGenerator 用来指定 beanName的生成器</p><p>源码位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @ComponentScan 注解的 nameGenerator 属性  ， beanName 生成器  </span><br><span class="hljs-comment">// Class&lt;? extends BeanNameGenerator&gt; nameGenerator() default BeanNameGenerator.class;  </span><br><span class="hljs-comment">// 默认值 BeanNameGenerator.classClass&lt;? extends BeanNameGenerator&gt; generatorClass = componentScan.getClass(&quot;nameGenerator&quot;);  </span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">useInheritedGenerator</span> <span class="hljs-operator">=</span> (BeanNameGenerator.class == generatorClass);<br></code></pre></td></tr></table></figure><p>自定义beanName生成器例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>## 设置 ComponentScan 的 nameGenerator 属性<br>...<br>nameGenerator = CustomerBeanNameGenerator.class<br>...<br><br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerBeanNameGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanNameGenerator</span> &#123;  <br>   <span class="hljs-meta">@Override</span>  <br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateBeanName</span><span class="hljs-params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> &#123;  <br>      <span class="hljs-comment">// beanName 从 userService 变成了 customerPrefixcn.xiaosy.springdemo.scanner.service.UserService      </span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;customerPrefix&quot;</span> + definition.getBeanClassName();  <br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>spring中的其他属性就不再举例子了。和这个的源码在同一个地方。</p><h2 id="扫描机制中用到的asm技术"><a href="#扫描机制中用到的asm技术" class="headerlink" title="扫描机制中用到的asm技术"></a>扫描机制中用到的asm技术</h2><p>通过反射的方式获取类的元信息，会需要把所有的类都加载到 jvm 中去<br>所以用 ASM 技术<br>不用去加载类，用 ASM 解析类</p><p>后面会根据类的元信息等，来判断是否能成为一个候选bean</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1681116240000oahuyj.png" alt="gh"></p>]]></content>
    
    
    <categories>
      
      <category>spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring的beanName规则</title>
    <link href="/2023/03/03/spring/spring%E7%9A%84beanName%E8%A7%84%E5%88%99/"/>
    <url>/2023/03/03/spring/spring%E7%9A%84beanName%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>比如下面的 <code>AService</code> 为什么beanName是 <code>AService</code> ，首字母为什么没有小写。小写反而获取不到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AService</span> &#123;  <br>&#125;<br><br>...<br>applicationContext.getBean(<span class="hljs-string">&quot;AService&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="源码逻辑"><a href="#源码逻辑" class="headerlink" title="源码逻辑"></a>源码逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">buildDefaultBeanName</span><span class="hljs-params">(BeanDefinition definition)</span> &#123;  <br>   <span class="hljs-type">String</span> <span class="hljs-variable">beanClassName</span> <span class="hljs-operator">=</span> definition.getBeanClassName();  <br>   Assert.state(beanClassName != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;No bean class name set&quot;</span>);  <br>   <span class="hljs-comment">// shortClassName 类名  </span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">shortClassName</span> <span class="hljs-operator">=</span> ClassUtils.getShortName(beanClassName);  <br>   <span class="hljs-comment">// 首字母小写 (除前两个字母都大写之外)  </span><br>   <span class="hljs-comment">// 以前的版本用的是这种方法  </span><br>   <span class="hljs-comment">// Introspector.decapitalize(shortClassName);  </span><br>   <span class="hljs-comment">/**    * 条件断点 &quot;AService&quot;.toLowerCase().equals(shortClassName.toLowerCase())  </span><br><span class="hljs-comment">    */</span>   <br>    <span class="hljs-keyword">return</span> StringUtils.uncapitalizeAsProperty(shortClassName);  <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">uncapitalizeAsProperty</span><span class="hljs-params">(String str)</span> &#123;  <br>   <span class="hljs-comment">// !hasLength(str) 为空 null 或 &quot;&quot;   // (str.length() &gt; 1 &amp;&amp; Character.isUpperCase(str.charAt(0)) &amp;&amp; Character.isUpperCase(str.charAt(1)))   长度大于1，且前两个字母大写  </span><br>   <span class="hljs-comment">// 即：有以下两种情况的返回类名  </span><br>   <span class="hljs-comment">// 1. 为空 null 或 &quot;&quot;   // 2. 长度大于1，且前两个字母大写 （比如： 类名 AService 则返回 AService ，而不是 aService）  </span><br>   <span class="hljs-keyword">if</span> (!hasLength(str) || (str.length() &gt; <span class="hljs-number">1</span> &amp;&amp; Character.isUpperCase(str.charAt(<span class="hljs-number">0</span>)) &amp;&amp;  <br>         Character.isUpperCase(str.charAt(<span class="hljs-number">1</span>)))) &#123;  <br>      <span class="hljs-keyword">return</span> str;  <br>   &#125;  <br>   <span class="hljs-keyword">return</span> changeFirstCharacterCase(str, <span class="hljs-literal">false</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调试截图"><a href="#调试截图" class="headerlink" title="调试截图"></a>调试截图</h2><p>这里的 beanName 是 <code>AService</code></p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1680967425000kn9jf8.png" alt="gh"></p><p>这里可以看到具体的判断逻辑 </p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1680967542000civnot.png" alt="gh"></p><h2 id="规则总结"><a href="#规则总结" class="headerlink" title="规则总结"></a>规则总结</h2><p>Java中 beanName 和数据库字段名字，不要让前两个字段都是大写。框架会对这进行判断然后特殊处理。<br>比如这里的 beanName 。</p><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>spring 不同的版本，可能代码位置不同，但是逻辑相同。</p>]]></content>
    
    
    <categories>
      
      <category>spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring6.0.x源码调试环境搭建</title>
    <link href="/2023/03/02/spring/spring6.0.x%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/02/spring/spring6.0.x%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>搭建一个spring源码调试环境，创建一个spring-demo模块，写一些测试代码。</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1680963213000ehfkgc.png" alt="gh"></p><p>给源码添加注释。</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1680963429000t29unb.png" alt="gh"></p><p>给源码打包</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1680963389000x0la82.png" alt="gh"></p><h1 id="ubantu环境下搭建spring6-0-x源码环境"><a href="#ubantu环境下搭建spring6-0-x源码环境" class="headerlink" title="ubantu环境下搭建spring6.0.x源码环境"></a>ubantu环境下搭建spring6.0.x源码环境</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="源码网址"><a href="#源码网址" class="headerlink" title="源码网址"></a>源码网址</h3><p><a href="https://github.com/spring-projects/spring-framework">Spring Framework</a></p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/16799267650003l9kkg.png" alt="gh"></p><h3 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h3><p>fork到自己的GitHub仓库，然后拉代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/GitHubXiaoSiyuan/spring-framework-6.0.7.git<br><br>代码拉到 ~/files/projects/kernel_projects/fr<br>amework 目录下<br><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/16799271110005yp0xa.png" alt="gh"></p><h3 id="gradle下载与配置"><a href="#gradle下载与配置" class="headerlink" title="gradle下载与配置"></a>gradle下载与配置</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p><p>gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties</p><p>找到版本为7.6的 gradle</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">distributionUrl=https\:<span class="hljs-regexp">//</span>services.gradle.org<span class="hljs-regexp">/distributions/g</span>radle-<span class="hljs-number">7.6</span>-bin.zip<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679927257000sbqasd.png" alt="gh"></p><p>找到 7.6 的版本，点击下载（注：点击之后，用迅雷下载很快）</p><p>下载链接如下（复制即可触发迅雷下载）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>downloads.gradle-dn.com<span class="hljs-regexp">/distributions/g</span>radle-<span class="hljs-number">7.6</span>-all.zip<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679927424000fswmw3.png" alt="gh"></p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo unzip gradle-7.6-all.zip<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679927947000r5p2g3.png" alt="gh"></p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679927983000wjyh33.png" alt="gh"></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置环境变量</span><br>sudo vi /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在底部加入这一段</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gradle</span><br>export GRADLE_HOME=/home/xiaosy/files/development/gradle-7.6 <br>export PATH=$NODE_HOME/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">变量生效</span><br>source /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置读写权限</span><br>sudo chmod -R 777 /home/xiaosy/files/development/gradle-7.6/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看版本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不知道为什么直接 gradle -v 没用</span><br>/home/xiaosy/files/development/gradle-7.6/bin/gradle -v<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679928189000b7pbyu.png" alt="gh"></p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679928401000nvb48a.png" alt="gh"></p><h3 id="idea配置"><a href="#idea配置" class="headerlink" title="idea配置"></a>idea配置</h3><h4 id="配置gradle编译"><a href="#配置gradle编译" class="headerlink" title="配置gradle编译"></a>配置gradle编译</h4><p>Tools -&gt; gradle</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 路径<br>压缩包放在 /gradle/<span class="hljs-keyword">wrapper</span>/ 目录下<br><br>路径配置<br>/home/xiaosy/files/development/gradle<span class="hljs-number">-7.6</span><br><br><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679929506000yfnvjm.png" alt="gh"></p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679929584000q7r1fh.png" alt="gh"></p><h4 id="下载二进制版本"><a href="#下载二进制版本" class="headerlink" title="下载二进制版本"></a>下载二进制版本</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>services.gradle.org<span class="hljs-regexp">/distributions/g</span>radle-<span class="hljs-number">7.6</span>-bin.zip<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679934576000u5ojbg.png" alt="gh"></p><h4 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h4><p>设置为 jdk17</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置环境变量</span><br>sudo vi /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改jdk路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">jdk</span><br>export JAVA_HOME=/home/xiaosy/files/development/jdk17/jdk-17.0.6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">变量生效</span><br>source /etc/profile<br><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/167998843000008zoai.png" alt="gh"></p><h4 id="gradle-wrapper-properties修改"><a href="#gradle-wrapper-properties修改" class="headerlink" title="gradle-wrapper.properties修改"></a>gradle-wrapper.properties修改</h4><p>打开 gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties</p><p>将distributionUrld地址替换为本地gradle下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 修改后</span><br>distributionUrl=<span class="hljs-regexp">/home/</span>xiaosy<span class="hljs-regexp">/files/</span>development/gradle-<span class="hljs-number">7.6</span>-all.zip<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/167992913500046fqby.png" alt="gh"></p><h4 id="build-gradle文件修改"><a href="#build-gradle文件修改" class="headerlink" title="build.gradle文件修改"></a>build.gradle文件修改</h4><p>替换国内镜像</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">repositories &#123;<br><span class="hljs-attribute">maven &#123; url &quot;https</span>://maven<span class="hljs-variable">.aliyun</span><span class="hljs-variable">.com</span>/repository/central&quot; &#125;<br>mavenCentral()<br>maven &#123;<br>url &quot;https://repo<span class="hljs-variable">.spring</span><span class="hljs-variable">.io</span>/milestone&quot;<br>content &#123;<br>// Netty 5 optional support<br>includeGroup &#x27;io<span class="hljs-variable">.projectreactor</span><span class="hljs-variable">.netty</span>&#x27;<br>&#125;<br>&#125;<br>maven &#123; url &quot;https://repo<span class="hljs-variable">.spring</span><span class="hljs-variable">.io</span>/libs-spring-framework-build&quot; &#125;<br>if (version<span class="hljs-variable">.contains</span>(&#x27;-&#x27;)) &#123;<br>maven &#123; url &quot;https://repo<span class="hljs-variable">.spring</span><span class="hljs-variable">.io</span>/milestone&quot; &#125;<br>&#125;<br>if (version<span class="hljs-variable">.endsWith</span>(&#x27;-SNAPSHOT&#x27;)) &#123;<br>maven &#123; url &quot;https://repo<span class="hljs-variable">.spring</span><span class="hljs-variable">.io</span>/snapshot&quot; &#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679929274000ahqgno.png" alt="gh"></p><h4 id="setting-gradle文件修改"><a href="#setting-gradle文件修改" class="headerlink" title="setting.gradle文件修改"></a>setting.gradle文件修改</h4><p>替换国内镜像</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">repositories</span> &#123;<br><span class="hljs-variable">maven</span> &#123;<br><span class="hljs-variable">url</span> <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span><br>&#125;<br><span class="hljs-variable">maven</span> &#123;<br><span class="hljs-variable">url</span> <span class="hljs-string">&quot;https://maven.aliyun.com/repository/google&quot;</span><br>&#125;<br><span class="hljs-variable">maven</span> &#123; <span class="hljs-variable">url</span> <span class="hljs-string">&quot;https://maven.aliyun.com/repository/gradle-plugin/&quot;</span> &#125;<br><br><span class="hljs-function"><span class="hljs-title">gradlePluginPortal</span>()</span><br><span class="hljs-function"><span class="hljs-title">google</span>()</span><br><span class="hljs-function"><span class="hljs-title">mavenCentral</span>()</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679929287000a6pt3a.png" alt="gh"></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>&#x2F;&#x2F;注释掉不然会A build scan was not published as you have not authenticated with server ‘ge.spring.io’.</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679934855000a8g2tu.png" alt="gh"></p><h4 id="用idea集成的gradlereload"><a href="#用idea集成的gradlereload" class="headerlink" title="用idea集成的gradlereload"></a>用idea集成的gradlereload</h4><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679929316000glnh3d.png" alt="gh"></p><p>编译成功</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679993513000z742ef.png" alt="gh"></p><h3 id="新建module"><a href="#新建module" class="headerlink" title="新建module"></a>新建module</h3><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1680022359000ghwzeq.png" alt="gh"></p><p>在新项目的build.gradle下添加对spring模块的依赖，这里我先添加了spring-beans 和spring-core的依赖。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">dependencies</span> &#123;<br>    <span class="hljs-keyword">compile</span>(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:spring-beans&quot;</span>))<br>    <span class="hljs-keyword">compile</span>(<span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;:spring-core&quot;</span>))<br>    testCompile <span class="hljs-keyword">group</span>: <span class="hljs-string">&#x27;junit&#x27;</span>, name: <span class="hljs-string">&#x27;junit&#x27;</span>, version: <span class="hljs-string">&#x27;4.12&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/16800225050001wj7rf.png" alt="gh"></p><p>在新项目的src&#x2F;main&#x2F;resource下添加spring-config.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--把对象的创建交给spring来管理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wts.Person&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>创建测试bean和启动类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br><span class="hljs-keyword">private</span> int id;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><br><span class="hljs-keyword">public</span> int <span class="hljs-title function_">getId</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setId</span>(<span class="hljs-params">int id</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) ac.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br>System.out.println(person);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><h3 id="1-更改压缩包位置"><a href="#1-更改压缩包位置" class="headerlink" title="1. 更改压缩包位置"></a>1. 更改压缩包位置</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">The</span> specified Gradle distribution &#x27;file:/home/xiaosy/files/projects/kernel_projects/framework/spring-framework-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">7</span>/gradle/wrapper/home/xiaosy/files/development/gradle-<span class="hljs-number">7</span>.<span class="hljs-number">6</span>-<span class="hljs-literal">all</span>.zip&#x27; does not exist.<br><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679929394000x48v4x.png" alt="gh"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>设置文件读写权限</p><p>Could not create parent directory for lock file &#x2F;gradle-7.6&#x2F;wrapper&#x2F;dists&#x2F;gradle-7.6-all&#x2F;cmg34oui1skho6ogkheeq1oxe&#x2F;gradle-7.6-all.zip.lck</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> chmod -R <span class="hljs-number">777</span> ~/files/projects/kernel_projects/framework/spring-framework-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679929679000ku4rli.png" alt="gh"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>Cause: zip file is empty</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679934236000u3uole.png" alt="gh"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679989129000l2vfdw.png" alt="gh"></p><p>解决：</p><p>gradle.properties</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">org.gradle.java.home=<span class="hljs-regexp">/home/</span>xiaosy<span class="hljs-regexp">/files/</span>development<span class="hljs-regexp">/jdk17/</span>jdk-<span class="hljs-number">17.0</span>.<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>俩 gradle.properties 都设置了</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679989274000kh9zm9.png" alt="gh"></p><p>注释掉这段代码，然后重写就不报错了，纯粹的编译问题</p><p><img src="https://fastly.jsdelivr.net/gh/GitHubXiaoSiyuan/images@main/2023/1679993478000870uh6.png" alt="gh"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://blog.51cto.com/u_12386660/5949894">Spring 6 源码编译和高效阅读源码技巧分享</a>，<a href="https://app.yinxiang.com/u/0/client/web#?b=43b768f0-ad67-412d-8d92-93ed2358c674&n=06b896b0-8844-487f-9f6b-ebae35a728fc&s=s59&">备份</a></li><li></li></ol><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/m0_37904184/article/details/127945857">Spring6.0.0源码阅读环境搭建-gradle构建编译</a>，<a href="https://app.yinxiang.com/u/0/client/web#?n=2f337807-c141-4572-b386-9d17c060efc1&b=43b768f0-ad67-412d-8d92-93ed2358c674&legacy=p">备份</a></li><li><a href="https://blog.csdn.net/wts563540/article/details/126686645">Spring源码深度解析：一、Spring整体架构和源码环境搭建</a>，<a href="https://app.yinxiang.com/u/0/client/web#?n=08cbcf6c-46aa-40df-90c5-ce4d86a0d040&b=43b768f0-ad67-412d-8d92-93ed2358c674&legacy=p">备份</a></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
